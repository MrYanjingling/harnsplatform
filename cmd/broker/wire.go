// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/go-kratos/kratos/v2"
	"github.com/go-kratos/kratos/v2/log"
	"harnsplatform/internal/conf"
	"harnsplatform/internal/server/modelmanager"
)

import (
	_ "go.uber.org/automaxprocs"
)

// Injectors from wire.go:

// wireApp init kratos application.
func wireApp(confServer *conf.Server, conf *conf.TimeSeriesData, data *conf.BrokerConfig, log *log.Helper, logger log.Logger) (*kratos.App, func(), error) {
	cleanup := func() error {
		return nil
	}

	if data.TimeSeriesStore.GetFlag() {
		// 初始化influxdb 数据库

	}

	if data.Sink.GetFlag() {

	}


	// dataData, cleanup, err := data.NewData(confData, log)
	// if err != nil {
	// 	return nil, nil, err
	// }
	//
	// thingTypesRepo := data.NewThingTypesRepo(dataData, log)
	// thingTypesUsecase := biz.NewThingTypesUsecase(thingTypesRepo, log)
	// thingTypesService := service.NewThingTypesService(thingTypesUsecase, log)
	//
	// thingsRepo := data.NewThingsRepo(dataData, log)
	// thingsUsecase := biz.NewThingsUsecase(thingsRepo, log)
	// thingsService := service.NewThingsService(thingsUsecase, thingTypesUsecase, log)
	//
	// agentsRepo := data.NewAgentsRepo(dataData, log)
	// agentsUsecase := biz.NewAgentsUsecase(agentsRepo, log)
	// agentService := service.NewAgentsService(agentsUsecase, log)

	httpServer := modelmanager.NewHTTPServer(confServer, log)
	app := newApp(logger, httpServer)
	return app, func() {
		cleanup()
	}, nil
}
