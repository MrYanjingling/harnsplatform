// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v6.31.1
// source: api/modelmanager/v1/thingTypes.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ThingTypes_CreateThingTypes_FullMethodName = "/api.modelmanager.v1.ThingTypes/CreateThingTypes"
	ThingTypes_UpdateThingTypes_FullMethodName = "/api.modelmanager.v1.ThingTypes/UpdateThingTypes"
	ThingTypes_DeleteThingTypes_FullMethodName = "/api.modelmanager.v1.ThingTypes/DeleteThingTypes"
	ThingTypes_GetThingTypes_FullMethodName    = "/api.modelmanager.v1.ThingTypes/GetThingTypes"
	ThingTypes_ListThingTypes_FullMethodName   = "/api.modelmanager.v1.ThingTypes/ListThingTypes"
)

// ThingTypesClient is the client API for ThingTypes service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ThingTypesClient interface {
	CreateThingTypes(ctx context.Context, in *CreateThingTypesRequest, opts ...grpc.CallOption) (*CreateThingTypesReply, error)
	UpdateThingTypes(ctx context.Context, in *UpdateThingTypesRequest, opts ...grpc.CallOption) (*UpdateThingTypesReply, error)
	DeleteThingTypes(ctx context.Context, in *DeleteThingTypesRequest, opts ...grpc.CallOption) (*DeleteThingTypesReply, error)
	GetThingTypes(ctx context.Context, in *GetThingTypesRequest, opts ...grpc.CallOption) (*GetThingTypesReply, error)
	ListThingTypes(ctx context.Context, in *ListThingTypesRequest, opts ...grpc.CallOption) (*ListThingTypesReply, error)
}

type thingTypesClient struct {
	cc grpc.ClientConnInterface
}

func NewThingTypesClient(cc grpc.ClientConnInterface) ThingTypesClient {
	return &thingTypesClient{cc}
}

func (c *thingTypesClient) CreateThingTypes(ctx context.Context, in *CreateThingTypesRequest, opts ...grpc.CallOption) (*CreateThingTypesReply, error) {
	out := new(CreateThingTypesReply)
	err := c.cc.Invoke(ctx, ThingTypes_CreateThingTypes_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *thingTypesClient) UpdateThingTypes(ctx context.Context, in *UpdateThingTypesRequest, opts ...grpc.CallOption) (*UpdateThingTypesReply, error) {
	out := new(UpdateThingTypesReply)
	err := c.cc.Invoke(ctx, ThingTypes_UpdateThingTypes_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *thingTypesClient) DeleteThingTypes(ctx context.Context, in *DeleteThingTypesRequest, opts ...grpc.CallOption) (*DeleteThingTypesReply, error) {
	out := new(DeleteThingTypesReply)
	err := c.cc.Invoke(ctx, ThingTypes_DeleteThingTypes_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *thingTypesClient) GetThingTypes(ctx context.Context, in *GetThingTypesRequest, opts ...grpc.CallOption) (*GetThingTypesReply, error) {
	out := new(GetThingTypesReply)
	err := c.cc.Invoke(ctx, ThingTypes_GetThingTypes_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *thingTypesClient) ListThingTypes(ctx context.Context, in *ListThingTypesRequest, opts ...grpc.CallOption) (*ListThingTypesReply, error) {
	out := new(ListThingTypesReply)
	err := c.cc.Invoke(ctx, ThingTypes_ListThingTypes_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ThingTypesServer is the server API for ThingTypes service.
// All implementations must embed UnimplementedThingTypesServer
// for forward compatibility
type ThingTypesServer interface {
	CreateThingTypes(context.Context, *CreateThingTypesRequest) (*CreateThingTypesReply, error)
	UpdateThingTypes(context.Context, *UpdateThingTypesRequest) (*UpdateThingTypesReply, error)
	DeleteThingTypes(context.Context, *DeleteThingTypesRequest) (*DeleteThingTypesReply, error)
	GetThingTypes(context.Context, *GetThingTypesRequest) (*GetThingTypesReply, error)
	ListThingTypes(context.Context, *ListThingTypesRequest) (*ListThingTypesReply, error)
	mustEmbedUnimplementedThingTypesServer()
}

// UnimplementedThingTypesServer must be embedded to have forward compatible implementations.
type UnimplementedThingTypesServer struct {
}

func (UnimplementedThingTypesServer) CreateThingTypes(context.Context, *CreateThingTypesRequest) (*CreateThingTypesReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateThingTypes not implemented")
}
func (UnimplementedThingTypesServer) UpdateThingTypes(context.Context, *UpdateThingTypesRequest) (*UpdateThingTypesReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateThingTypes not implemented")
}
func (UnimplementedThingTypesServer) DeleteThingTypes(context.Context, *DeleteThingTypesRequest) (*DeleteThingTypesReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteThingTypes not implemented")
}
func (UnimplementedThingTypesServer) GetThingTypes(context.Context, *GetThingTypesRequest) (*GetThingTypesReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetThingTypes not implemented")
}
func (UnimplementedThingTypesServer) ListThingTypes(context.Context, *ListThingTypesRequest) (*ListThingTypesReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListThingTypes not implemented")
}
func (UnimplementedThingTypesServer) mustEmbedUnimplementedThingTypesServer() {}

// UnsafeThingTypesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ThingTypesServer will
// result in compilation errors.
type UnsafeThingTypesServer interface {
	mustEmbedUnimplementedThingTypesServer()
}

func RegisterThingTypesServer(s grpc.ServiceRegistrar, srv ThingTypesServer) {
	s.RegisterService(&ThingTypes_ServiceDesc, srv)
}

func _ThingTypes_CreateThingTypes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateThingTypesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThingTypesServer).CreateThingTypes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ThingTypes_CreateThingTypes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThingTypesServer).CreateThingTypes(ctx, req.(*CreateThingTypesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ThingTypes_UpdateThingTypes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateThingTypesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThingTypesServer).UpdateThingTypes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ThingTypes_UpdateThingTypes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThingTypesServer).UpdateThingTypes(ctx, req.(*UpdateThingTypesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ThingTypes_DeleteThingTypes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteThingTypesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThingTypesServer).DeleteThingTypes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ThingTypes_DeleteThingTypes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThingTypesServer).DeleteThingTypes(ctx, req.(*DeleteThingTypesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ThingTypes_GetThingTypes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetThingTypesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThingTypesServer).GetThingTypes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ThingTypes_GetThingTypes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThingTypesServer).GetThingTypes(ctx, req.(*GetThingTypesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ThingTypes_ListThingTypes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListThingTypesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThingTypesServer).ListThingTypes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ThingTypes_ListThingTypes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThingTypesServer).ListThingTypes(ctx, req.(*ListThingTypesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ThingTypes_ServiceDesc is the grpc.ServiceDesc for ThingTypes service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ThingTypes_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.modelmanager.v1.ThingTypes",
	HandlerType: (*ThingTypesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateThingTypes",
			Handler:    _ThingTypes_CreateThingTypes_Handler,
		},
		{
			MethodName: "UpdateThingTypes",
			Handler:    _ThingTypes_UpdateThingTypes_Handler,
		},
		{
			MethodName: "DeleteThingTypes",
			Handler:    _ThingTypes_DeleteThingTypes_Handler,
		},
		{
			MethodName: "GetThingTypes",
			Handler:    _ThingTypes_GetThingTypes_Handler,
		},
		{
			MethodName: "ListThingTypes",
			Handler:    _ThingTypes_ListThingTypes_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/modelmanager/v1/thingTypes.proto",
}
